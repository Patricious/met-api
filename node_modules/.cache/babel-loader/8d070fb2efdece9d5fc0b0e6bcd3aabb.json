{"ast":null,"code":"var _jsxFileName = \"/Users/patricia/Downloads/met-museum-react/src/App.js\";\nimport React, { useEffect, useState, useReducer } from \"react\";\nimport LazyLoadedObjectListComponent from \"./components/LazyLoadedObjectListComponent\";\nimport \"./App.css\";\nimport { useSpring, animated } from 'react-spring';\nimport { ReactComponent as Loading } from \"@svgr/webpack?-svgo,+titleProp,+ref!./loading.svg\";\nimport { appReducer, SET_KEYWORD, SET_RESULT, DEFAULT_SEARCH_RESULT, INITIAL_STATE } from './AppReducer';\n\nfunction App() {\n  const [timeoutToken, setTimeoutToken] = useState(null);\n  const [appState, dispatch] = useReducer(appReducer, INITIAL_STATE);\n\n  const setSearchResultAction = result => {\n    dispatch({\n      type: SET_RESULT,\n      payload: result\n    });\n  };\n\n  const setKeywordAction = result => {\n    dispatch({\n      type: SET_KEYWORD,\n      payload: result\n    });\n  };\n  /**\n   * creates a \"buffer\" when user is typing a keyword to prevent multiple calls\n   * @param {*} keyword\n   */\n\n\n  const setKeywordDebounced = keyword => {\n    clearTimeout(timeoutToken);\n    var token = setTimeout(() => setKeywordAction(keyword), 400);\n    setTimeoutToken(token);\n  };\n\n  const chunk = (arr, size) => Array.from({\n    length: Math.ceil(arr.length / size)\n  }, (v, i) => arr.slice(i * size, i * size + size));\n\n  const {\n    keyword,\n    isLoading,\n    searchResult\n  } = appState;\n  useEffect(() => {\n    const abortController = new AbortController(); // this is used to cancel ongoing fetch requests when user updates the keyword to make sure we only run relavant queries\n\n    const fetchData = async () => {\n      if (!keyword) setSearchResultAction(DEFAULT_SEARCH_RESULT);else try {\n        var res = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?q=${keyword}`, {\n          method: \"GET\",\n          signal: abortController.signal,\n          cache: \"force-cache\"\n        });\n        var response = await res.json();\n        if (!response.objectIDs) setSearchResultAction(DEFAULT_SEARCH_RESULT);else setSearchResultAction(response);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"Fetch aborted 👀\");\n          console.dir(err);\n        } else {\n          console.error(\"Error occured\", err);\n        }\n      }\n    };\n\n    fetchData();\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, [keyword]);\n  const fadeInProps = useSpring({\n    opacity: 1,\n    from: {\n      opacity: 0\n    }\n  });\n  const titleAnimateProps = useSpring({\n    width: 450,\n    config: {\n      duration: 800\n    },\n    from: {\n      width: 0\n    }\n  });\n  return /*#__PURE__*/React.createElement(animated.div, {\n    style: fadeInProps,\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(animated.h1, {\n    style: titleAnimateProps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"\\uD83C\\uDFDB Metropolitan Museum of Art\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"search\",\n    placeholder: \"Enter keyword here...\",\n    onChange: e => setKeywordDebounced(e.target.value),\n    ref: input => input && input.focus(),\n    \"aria-label\": \"search term\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), isLoading ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, \"hello \"), /*#__PURE__*/React.createElement(ResultsCaption, {\n    style: fadeInProps,\n    total: searchResult.total,\n    keyword: keyword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, // break the results into chuncks of 200 items so that we can optimize performance by assigning\n  // intersection observer to items in each chunk based on current scroll position at any given time\n  chunk(searchResult.objectIDs, 200).map(ids => /*#__PURE__*/React.createElement(LazyLoadedObjectListComponent, {\n    key: ids[0],\n    data: ids,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 19\n    }\n  })))));\n}\n\nconst ResultsCaption = ({\n  total,\n  keyword,\n  ...props\n}) => keyword ? /*#__PURE__*/React.createElement(animated.span, Object.assign({\n  className: \"Search-Caption\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 3\n  }\n}), total + ` results for: ` + keyword) : null;\n\nexport default App;","map":{"version":3,"sources":["/Users/patricia/Downloads/met-museum-react/src/App.js"],"names":["React","useEffect","useState","useReducer","LazyLoadedObjectListComponent","useSpring","animated","appReducer","SET_KEYWORD","SET_RESULT","DEFAULT_SEARCH_RESULT","INITIAL_STATE","App","timeoutToken","setTimeoutToken","appState","dispatch","setSearchResultAction","result","type","payload","setKeywordAction","setKeywordDebounced","keyword","clearTimeout","token","setTimeout","chunk","arr","size","Array","from","length","Math","ceil","v","i","slice","isLoading","searchResult","abortController","AbortController","fetchData","res","fetch","method","signal","cache","response","json","objectIDs","err","name","console","log","dir","error","cleanup","abort","fadeInProps","opacity","titleAnimateProps","width","config","duration","e","target","value","input","focus","total","map","ids","ResultsCaption","props"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useReducer } from \"react\";\nimport LazyLoadedObjectListComponent from \"./components/LazyLoadedObjectListComponent\";\n\nimport \"./App.css\";\nimport { useSpring, animated } from 'react-spring'\nimport { ReactComponent as Loading } from './loading.svg';\nimport { appReducer, SET_KEYWORD, SET_RESULT, DEFAULT_SEARCH_RESULT, INITIAL_STATE } from './AppReducer';\n\nfunction App() {\n  const [timeoutToken, setTimeoutToken] = useState(null);\n\n  const [appState, dispatch] = useReducer(\n    appReducer,\n    INITIAL_STATE\n  );\n\n  const setSearchResultAction = result => {\n    dispatch({ type: SET_RESULT, payload: result });\n  };\n\n  const setKeywordAction = result => {\n    dispatch({ type: SET_KEYWORD, payload: result });\n  };\n\n  /**\n   * creates a \"buffer\" when user is typing a keyword to prevent multiple calls\n   * @param {*} keyword\n   */\n  const setKeywordDebounced = keyword => {\n    clearTimeout(timeoutToken);\n    var token = setTimeout(() => setKeywordAction(keyword), 400);\n    setTimeoutToken(token);\n  };\n\n  const chunk = (arr, size) =>\n    Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>\n      arr.slice(i * size, i * size + size)\n    );\n\n  const { keyword, isLoading, searchResult } = appState;\n\n  useEffect(() => {\n    const abortController = new AbortController(); // this is used to cancel ongoing fetch requests when user updates the keyword to make sure we only run relavant queries\n\n    const fetchData = async () => {\n      if (!keyword)\n        setSearchResultAction(DEFAULT_SEARCH_RESULT);\n      else\n        try {\n          var res = await fetch(\n            `https://collectionapi.metmuseum.org/public/collection/v1/search?q=${keyword}`,\n            {\n              method: \"GET\",\n              signal: abortController.signal,\n              cache: \"force-cache\",\n            }\n          );\n\n          var response = await res.json();\n\n          if (!response.objectIDs)\n            setSearchResultAction(DEFAULT_SEARCH_RESULT);\n          else\n            setSearchResultAction(response);\n\n        } catch (err) {\n          if (err.name === \"AbortError\") {\n            console.log(\"Fetch aborted 👀\");\n            console.dir(err);\n          } else {\n            console.error(\"Error occured\", err);\n          }\n        }\n    };\n\n    fetchData();\n\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, [keyword]);\n\n  const fadeInProps = useSpring({ opacity: 1, from: { opacity: 0 } })\n  const titleAnimateProps = useSpring({ width: 450, config: { duration: 800 }, from: { width: 0 } })\n\n  return (\n    <animated.div style={fadeInProps} className=\"App\">\n      <animated.h1 style={titleAnimateProps}>🏛 Metropolitan Museum of Art</animated.h1>\n      <input\n        type=\"search\"\n        placeholder=\"Enter keyword here...\"\n        onChange={e => setKeywordDebounced(e.target.value)}\n        ref={input => input && input.focus()}\n        aria-label=\"search term\"\n      />\n      {isLoading ? (\n        <Loading />\n      ) : (\n          <>\n\n          <div>hello </div>\n            <ResultsCaption style={fadeInProps} total={searchResult.total} keyword={keyword} />\n            <div >\n              { // break the results into chuncks of 200 items so that we can optimize performance by assigning\n                // intersection observer to items in each chunk based on current scroll position at any given time\n                chunk(searchResult.objectIDs, 200).map(ids =>\n                  <LazyLoadedObjectListComponent key={ids[0]} data={ids} />\n                )}\n            </div>\n          </>\n        )}\n    </animated.div>\n  );\n}\n\nconst ResultsCaption = ({ total, keyword, ...props }) => keyword ?\n  <animated.span className=\"Search-Caption\" {...props}>{total + ` results for: ` + keyword}</animated.span> : null;\n\n\n  \n\nexport default App;"]},"metadata":{},"sourceType":"module"}